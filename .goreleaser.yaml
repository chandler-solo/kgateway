version: 2
before:
  hooks:
    - go mod tidy
    - go mod download
builds:
  - id: controller
    main: ./cmd/kgateway
    binary: kgateway-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    mod_timestamp: "{{ .CommitTimestamp }}"
    goos:
      - linux
    goarch:
      - amd64
      - arm64
  - id: sds
    main: ./cmd/sds
    binary: sds-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    goos:
      - linux
    goarch:
      - amd64
      - arm64
  - id: envoyinit
    main: ./cmd/envoyinit
    binary: envoyinit-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    goos:
      - linux
    goarch:
      - amd64
      - arm64
dockers_v2:
  - id: controller
    ids:
      - controller
    dockerfile: cmd/kgateway/Dockerfile
    images:
      - "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.CONTROLLER_IMAGE_REPO }}"
    tags:
      - "{{ .Env.VERSION }}"
    platforms:
      - linux/amd64
      - linux/arm64
    build_args:
      ENVOY_IMAGE: "{{ .Env.ENVOY_IMAGE }}"
    flags:
      - "--pull"
  - id: sds
    ids:
      - sds
    dockerfile: cmd/sds/Dockerfile
    images:
      - "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}"
    tags:
      - "{{ .Env.VERSION }}"
    platforms:
      - linux/amd64
      - linux/arm64
    build_args:
      BASE_IMAGE: "{{ .Env.ALPINE_BASE_IMAGE }}"
    flags:
      - "--pull"
  - id: envoyinit
    ids:
      - envoyinit
    dockerfile: cmd/envoyinit/Dockerfile
    images:
      - "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.ENVOYINIT_IMAGE_REPO }}"
    tags:
      - "{{ .Env.VERSION }}"
    platforms:
      - linux/amd64
      - linux/arm64
    build_args:
      ENTRYPOINT_SCRIPT: "/cmd/envoyinit/docker-entrypoint.sh"
      ENVOY_IMAGE: "{{ .Env.ENVOY_IMAGE }}"
      RUSTFORMATIONS_DIR: "/internal/envoyinit/rustformations"
    flags:
      - "--pull"
    extra_files:
      - cmd/envoyinit/docker-entrypoint.sh
      - internal/envoyinit/rustformations
changelog:
  disable: true
release:
  disable: '{{ if isEnvSet "GORELEASER_DISABLE_RELEASE" }}{{ .Env.GORELEASER_DISABLE_RELEASE }}{{ else }}false{{ end }}'
  prerelease: "auto"
  mode: "replace"
  replace_existing_artifacts: true
  target_commitish: "{{ .FullCommit }}"
  header: |
    {{ if eq .Env.VERSION "v2.2.0-main" }}
    ðŸš€ Rolling main build of kgateway!
    ---
    It includes the latest changes but may be unstable. Use it for testing and providing feedback.
    {{ else }}
    ðŸŽ‰ Welcome to the {{ .Env.VERSION }} release of the kgateway project!
    ---
    {{ end }}
  footer: |
    ## Installation

    The kgateway project is available as a Helm chart and docker images.

    ### Helm Charts

    The Helm chart is available at {{ .Env.VANITY_REGISTRY }}/charts/kgateway.

    ### Docker Images

    The docker images are available at:

    - {{ .Env.VANITY_REGISTRY }}/{{ .Env.CONTROLLER_IMAGE_REPO }}:{{ .Env.VERSION }}
    - {{ .Env.VANITY_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}
    - {{ .Env.VANITY_REGISTRY }}/{{ .Env.ENVOYINIT_IMAGE_REPO }}:{{ .Env.VERSION }}

    ## Quickstart

    Try installing this release:
    ```
    helm install kgateway-crds oci://{{ .Env.VANITY_REGISTRY }}/charts/kgateway-crds --version {{ .Env.VERSION }} --namespace kgateway-system --create-namespace
    helm install kgateway oci://{{ .Env.VANITY_REGISTRY }}/charts/kgateway --version {{ .Env.VERSION }} --namespace kgateway-system --create-namespace
    ```

    For detailed installation instructions and next steps, please visit our [quickstart guide](https://kgateway.dev/docs/quickstart/).
